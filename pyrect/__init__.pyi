from collections import Callable, Iterable
from typing import Generic, NamedTuple, TypeVar, overload
from typing_extensions import Literal, TypeAlias

_Number = TypeVar("_Number", int, float)

TOP = "top"
BOTTOM = "bottom"
LEFT = "left"
RIGHT = "right"
TOPLEFT = "topleft"
TOPRIGHT = "topright"
BOTTOMLEFT = "bottomleft"
BOTTOMRIGHT = "bottomright"
MIDTOP = "midtop"
MIDRIGHT = "midright"
MIDLEFT = "midleft"
MIDBOTTOM = "midbottom"
CENTER = "center"
CENTERX = "centerx"
CENTERY = "centery"
WIDTH = "width"
HEIGHT = "height"
SIZE = "size"
BOX = "box"
AREA = "area"
PERIMETER = "perimeter"

_PointAttribute: TypeAlias = Literal[
    "topleft", "topright", "bottomleft", "bottomright", "midtop", "midright", "midleft", "midbottom", "center"
]
_SizeAttribute: TypeAlias = Literal["size"]
_BoxAttribute: TypeAlias = Literal["box"]
_NumberAttributeSet: TypeAlias = Literal["top", "bottom", "left", "right", "centerx", "centery", "width", "height"]
_NumberAttributeGet: TypeAlias = _NumberAttributeSet | Literal["area", "perimeter"]

class Box(NamedTuple, Generic[_Number]):
    left: _Number
    top: _Number
    width: _Number
    height: _Number

class Point(NamedTuple, Generic[_Number]):
    x: _Number
    y: _Number

class Size(NamedTuple, Generic[_Number]):
    width: _Number
    height: _Number

class PyRectException(Exception): ...

class Rect(Generic[_Number]):
    onChange: Callable[..., object]
    onRead: Callable[..., object]

    @overload
    def __init__(
        self: Rect[int],
        left: float = ...,
        top: float = ...,
        width: float = ...,
        height: float = ...,
        enableFloat: Literal[False] = ...,
        readOnly: bool = ...,
        onChange: Callable[..., object] | None = ...,
        onRead: Callable[..., object] | None = ...,
    ) -> None: ...
    @overload
    def __init__(
        self: Rect[float],
        left: float = ...,
        top: float = ...,
        width: float = ...,
        height: float = ...,
        enableFloat: Literal[True] = ...,
        readOnly: bool = ...,
        onChange: Callable[..., object] | None = ...,
        onRead: Callable[..., object] | None = ...,
    ) -> None: ...
    def callOnChange(self, oldLeft: _Number, oldTop: _Number, oldWidth: _Number, oldHeight: _Number) -> None: ...
    @property
    def enableFloat(self) -> bool: ...
    @enableFloat.setter
    def enableFloat(self, value: bool) -> None: ...
    @property
    def left(self) -> _Number: ...
    @left.setter
    def left(self, newLeft: float) -> None: ...
    x = left
    @property
    def top(self) -> _Number: ...
    @top.setter
    def top(self, newTop: float) -> None: ...
    y = top
    @property
    def right(self) -> _Number: ...
    @right.setter
    def right(self, newRight: float) -> None: ...
    @property
    def bottom(self) -> _Number: ...
    @bottom.setter
    def bottom(self, newBottom: float) -> None: ...
    @property
    def topleft(self) -> Point[_Number]: ...
    @topleft.setter
    def topleft(self, value: tuple[float, float]) -> None: ...
    @property
    def bottomleft(self) -> Point[_Number]: ...
    @bottomleft.setter
    def bottomleft(self, value: tuple[float, float]) -> None: ...
    @property
    def topright(self) -> Point[_Number]: ...
    @topright.setter
    def topright(self, value: tuple[float, float]) -> None: ...
    @property
    def bottomright(self) -> Point[_Number]: ...
    @bottomright.setter
    def bottomright(self, value: tuple[float, float]) -> None: ...
    @property
    def midtop(self) -> Point[_Number]: ...
    @midtop.setter
    def midtop(self, value: tuple[float, float]) -> None: ...
    @property
    def midbottom(self) -> Point[_Number]: ...
    @midbottom.setter
    def midbottom(self, value: tuple[float, float]) -> None: ...
    @property
    def midleft(self) -> Point[_Number]: ...
    @midleft.setter
    def midleft(self, value: tuple[float, float]) -> None: ...
    @property
    def midright(self) -> Point[_Number]: ...
    @midright.setter
    def midright(self, value: tuple[float, float]) -> None: ...
    @property
    def center(self) -> Point[_Number]: ...
    @center.setter
    def center(self, value: tuple[float, float]) -> None: ...
    @property
    def centerx(self) -> _Number: ...
    @centerx.setter
    def centerx(self, newCenterx: float) -> None: ...
    @property
    def centery(self) -> _Number: ...
    @centery.setter
    def centery(self, newCentery: float) -> None: ...
    @property
    def size(self) -> Size[_Number]: ...
    @size.setter
    def size(self, value: tuple[float, float]) -> None: ...
    @property
    def width(self) -> _Number: ...
    @width.setter
    def width(self, newWidth: float) -> None: ...
    w = width
    @property
    def height(self) -> _Number: ...
    @height.setter
    def height(self, newHeight: float) -> None: ...
    h = height
    @property
    def area(self) -> _Number: ...
    @property
    def perimeter(self) -> _Number: ...
    @property
    def box(self) -> Box[_Number]: ...
    @box.setter
    def box(self, value: tuple[float, float, float, float]) -> None: ...
    @overload
    def get(self, rectAttrName: _NumberAttributeGet) -> _Number: ...
    @overload
    def get(self, rectAttrName: _PointAttribute) -> Point[_Number]: ...
    @overload
    def get(self, rectAttrName: _BoxAttribute) -> Box[_Number]: ...
    @overload
    def get(self, rectAttrName: _SizeAttribute) -> Size[_Number]: ...
    @overload
    def get(self, rectAttrName: str) -> _Number | Point[_Number] | Box[_Number] | Size[_Number]: ...
    @overload
    def set(self, rectAttrName: _NumberAttributeSet, value: float) -> None: ...
    @overload
    def set(self, rectAttrName: _PointAttribute, value: tuple[float, float]) -> None: ...
    @overload
    def set(self, rectAttrName: _BoxAttribute | _SizeAttribute, value: tuple[float, float, float, float]) -> None: ...
    @overload
    def set(self, rectAttrName: str, value: float | tuple[float, float] | tuple[float, float, float, float]) -> None: ...
    def move(self, xOffset: float, yOffset: float) -> None: ...
    def copy(self) -> Rect[_Number]: ...
    def inflate(self, widthChange: float = ..., heightChange: float = ...) -> None: ...
    def clamp(self, otherRect: Rect[float]) -> None: ...
    def union(self, otherRect: Rect[float]) -> None: ...
    def unionAll(self, otherRects: Iterable[Rect[float]]) -> None: ...
    def normalize(self) -> None: ...
    def collide(self, value: Rect[float] | tuple[float, float] | tuple[float, float, float, float]) -> bool: ...
